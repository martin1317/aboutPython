
今天主要内容：

1. 简单介绍下函数
2. 介绍下递归

# 函数
为什么要有函数？


函数就可以当成是工具。
不同的函数 实现不同的功能。


使用函数分为两个阶段：

1. 准备工具--> 函数的定义阶段
2. 使用工具--> 函数的调用阶段


Python中的内置函数，可以直接拿来使用


函数的定义

def foo(arg):
    ''' 函数的描述信息'''
    函数要执行的功能
    print("Hello world！")
    return 1

返回值
Python中函数的返回值 通过 return 返回，支持一次返回多个值。
如果没有显式的return一个值，那么默认返回None。
函数在执行过程中只会执行一个return,执行到 return 语句的时候函数就结束了。


函数的参数

Python是弱类型的语言

没有办法约束 函数调用者 给你传什么参数的


形参和实参

def foo(a, b):
    ret = a + b
    return ret

形参 --> 形式上的参数 --> 函数定义阶段--> 类似于变量名

foo(1, 2)

实参 --> 实际上的参数 --> 函数的调用阶段 --> 类似于变量的值

x = 1
y = 2
foo(x, y)  --> a = 1, b = 2


不可变对象：
字符串，数字
在函数内部修改的是值的拷贝（副本）


可变对象：
列表，字典
在函数内部修改的是值的引用（本身）




位置参数和默认参数

1. 按位置传参
2. 按关键字传参
3. 混着用

注意事项：
1. 不能对同一个参数重复传值
2. 按位置传参必须写在按关键字传参前面


在形参的角度：

1. 位置参数必须传

2. 默认参数
在函数定义的时候，我就给他一个初始值

默认参数注意事项：

1. 在函数定义阶段 默认参数一定要写在位置参数的后面



递归

函数的嵌套调用

在函数的内部可以调用其他函数的。

递归 就是 在函数内部 直接或间接的 调用 自己


使用递归要注意的事项：
1. 必须要有明确的退出条件
2. 每次进入下一次递归调用的时候，问题的规模要有所较少
3. 递归的效率非常低，递归的层数过多就会栈溢出。

Python查看递归限制层数：
>>> import sys
>>> sys.getrecursionlimit()
1000






















